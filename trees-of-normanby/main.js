import{createClient as e}from"https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm";const n="https://cnibjqyawzddpcpdrzrz.supabase.co";document.addEventListener("DOMContentLoaded",(async function(){const t=e(n,"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNuaWJqcXlhd3pkZHBjcGRyenJ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTk3NjY1MDMsImV4cCI6MjAzNTM0MjUwM30.p3HiV0fezopi5YUFmyCFYMNKcb4TplKodJBt121oCiA"),{data:{session:a}}=await t.auth.getSession();if(!a)return void(window.location.href="login.html");const i=a.user.id,o=await async function(e){try{const{data:n,error:a}=await t.rpc("get_user_display_name",{user_id:e});if(a)throw a;return n}catch(e){return console.error("Error fetching user display name:",e),null}}(i)||a.user.email;document.getElementById("usernameText").textContent=o,document.getElementById("usernameContainer").addEventListener("click",(()=>{const e=document.getElementById("userDropdown");e.style.display="block"===e.style.display?"none":"block"})),document.addEventListener("click",(e=>{const n=document.getElementById("userDropdown");"block"!==n.style.display||e.target.closest(".username-container")||(n.style.display="none")})),document.getElementById("logout-menu-item").addEventListener("click",(async()=>{const{error:e}=await t.auth.signOut();e?console.error("Error logging out:",e):window.location.href="login.html"}));const r=document.getElementById("card-container"),s=document.getElementById("add-new-button"),d=document.getElementById("kingdom-filter"),l=document.getElementById("viewSelector");let c="specimen",u=[],m={},p={},g={},f={},y={},v={},h={},b={};const _=q,x=S;l.addEventListener("change",(()=>E(l.value))),s.addEventListener("click",_),d.addEventListener("change",x);const w=new MutationObserver((e=>{for(const n of e)n.addedNodes.length>0&&window.scrollTo({top:document.body.scrollHeight,behavior:"smooth"})}));function $(e){e.querySelector("#show-location-button").addEventListener("click",(()=>{const n=parseInt(e.querySelectorAll(".menu-button-container select")[0].value),t=parseInt(e.querySelector("#specimenIdField").textContent),a=e.querySelector("#locationField").value,[i,o]=a.split(", ").map((e=>e.trim())),r=function(e,n,t){function a(e){return btoa(unescape(encodeURIComponent(e)))}return function(e,n,t){const i=a(JSON.stringify(e)),o=a(JSON.stringify(n));return`${i}.${o}.${a(i+"."+o+"."+t)}`}(e,n,t)}({alg:"HS256",typ:"JWT"},{lat:i,lng:o,speciesId:n,specimenId:t,specimenInfo:e.querySelector("#specimenInfoField").value,isAccessible:e.querySelectorAll(".toggle-switch input")[0].checked,images:e.querySelector(".image-data").dataset.imageFilenames,imageInfo:e.querySelector(".image-data").dataset.imageDescriptions,markerType:"Tree",showMarker:!0,exp:Math.floor(Date.now()/1e3)+3600},"key"),s=`https://ultradian7.github.io/trees-of-normanby/web/index.html?token=${encodeURIComponent(r)}`;window.open(s,"_blank")}))}function k(e){const n=e.querySelectorAll('[id*="add-"]');for(const e of n)e.addEventListener("click",(e=>{E(e.target.id.replace(/add-/,"").replace(/-button$/,"")),setTimeout((()=>{q()}),300)}))}function E(e){c=e,S(),l.value=e}async function S(){w.disconnect(),r.innerHTML="",await async function(){const[e,n,a,i,o,r,s,d]=await Promise.all([t.from("taxon_genus").select("id, name"),t.from("taxon_species").select("id, name, genus_id"),t.from("taxon_variety").select("id, name"),t.from("taxon_family").select("id, name"),t.from("taxon_order").select("id, name"),t.from("taxon_class").select("id, name"),t.from("taxon_phylum").select("id, name"),t.from("location_categories").select("id, name")]);if(e.error||n.error||a.error||i.error||o.error||r.error||s.error)return void console.error("Error fetching dropdown data:",e.error||n.error||a.error||i.error||o.error||r.error||s.error);m=j(e.data),p=function(e,n){const t={};return e.forEach((e=>{const a=n[e.genus_id];t[e.id]=`${a} ${e.name}`})),t}(n.data,m),g=j(a.data),f=j(i.data),y=j(o.data),v=j(r.data),h=j(s.data),b=j(d.data)}(),"species"===c?await async function(){const e=d.value;let n=t.from("taxon_species").select("\n                            id,\n                            name,\n                            common_name,\n                            native_range,\n                            info,\n                            genus_id,\n                            taxon_genus!inner (\n                                id,\n                                name,\n                                taxon_family!inner (\n                                    id,\n                                    name,\n                                    taxon_order!inner (\n                                        id,\n                                        name,\n                                        taxon_class!inner (\n                                            id,\n                                            name,\n                                            taxon_phylum!inner (\n                                                id,\n                                                name,\n                                                kingdom_id\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        ").order("id");e&&(n=n.eq("taxon_genus.taxon_family.taxon_order.taxon_class.taxon_phylum.kingdom_id",e));const{data:a,error:i}=await n;if(i)return void console.error("Error fetching species data:",i);a.forEach((e=>N(e))),B(),z()}():"specimen"===c?await async function(){const e=d.value;let n=t.from("botanical_specimen").select("\n                            id,\n                            species_id,\n                            variety_id,\n                            location::geometry,\n                            info,\n                            is_accessible,\n                            is_tree,\n                            is_notable,\n                            images,\n                            image_info,\n                            taxon_species!inner (\n                                id,\n                                name,\n                                genus_id,\n                                taxon_genus!inner (\n                                    id,\n                                    name,\n                                    taxon_family!inner (\n                                        id,\n                                        name,\n                                        taxon_order!inner (\n                                            id,\n                                            name,\n                                            taxon_class!inner (\n                                                id,\n                                                name,\n                                                taxon_phylum!inner (\n                                                    id,\n                                                    name,\n                                                    kingdom_id\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        ").order("id");e&&(n=n.eq("taxon_species.taxon_genus.taxon_family.taxon_order.taxon_class.taxon_phylum.kingdom_id",e));const{data:a,error:i}=await n;if(i)return void console.error("Error fetching specimen data:",i);a.map((e=>{const n=e.location?parseFloat(e.location.coordinates[1]):0,t=e.location?parseFloat(e.location.coordinates[0]):0;return{...e,latitude:n,longitude:t}})).forEach((e=>{A(e)})),B(),z()}():"genus"===c?await async function(){const e=d.value;let n=t.from("taxon_genus").select("\n                            id,\n                            name,\n                            info,\n                            family_id,\n                            taxon_family!inner (\n                                id,\n                                name,\n                                taxon_order!inner (\n                                    id,\n                                    name,\n                                    taxon_class!inner (\n                                        id,\n                                        name,\n                                        taxon_phylum!inner (\n                                            id,\n                                            name,\n                                            kingdom_id\n                                        )\n                                    )\n                                )\n                            )\n                        ").order("id");e&&(n=n.eq("taxon_family.taxon_order.taxon_class.taxon_phylum.kingdom_id",e));const{data:a,error:i}=await n;if(i)return void console.error("Error fetching genus data:",i);a.forEach((e=>C(e))),B(),z()}():"family"===c?await async function(){const e=d.value;let n=t.from("taxon_family").select("\n                            id,\n                            name,\n                            info,\n                            order_id,\n                            taxon_order!inner (\n                                id,\n                                name,\n                                taxon_class!inner (\n                                    id,\n                                    name,\n                                    taxon_phylum!inner (\n                                        id,\n                                        name,\n                                        kingdom_id\n                                    )\n                                )\n                            )\n                        ").order("id");e&&(n=n.eq("taxon_order.taxon_class.taxon_phylum.kingdom_id",e));const{data:a,error:i}=await n;if(i)return void console.error("Error fetching family data:",i);a.forEach((e=>O(e))),B(),z()}():"order"===c?await async function(){const e=d.value;let n=t.from("taxon_order").select("\n                            id,\n                            name,\n                            info,\n                            class_id,\n                            taxon_class!inner (\n                                id,\n                                name,\n                                taxon_phylum!inner (\n                                    id,\n                                    name,\n                                    kingdom_id\n                                )\n                            )\n                        ").order("id");e&&(n=n.eq("taxon_class.taxon_phylum.kingdom_id",e));const{data:a,error:i}=await n;if(i)return void console.error("Error fetching order data:",i);a.forEach((e=>L(e))),B(),z()}():"class"===c?await async function(){const e=d.value;let n=t.from("taxon_class").select("\n                            id,\n                            name,\n                            info,\n                            phylum_id,\n                            taxon_phylum!inner (\n                                id,\n                                name,\n                                kingdom_id\n                            )\n                        ").order("id");e&&(n=n.eq("taxon_phylum.kingdom_id",e));const{data:a,error:i}=await n;if(i)return void console.error("Error fetching class data:",i);a.forEach((e=>J(e))),B(),z()}():"phylum"===c?await async function(){const e=d.value;let n=t.from("taxon_phylum").select("\n                            id,\n                            name,\n                            info,\n                            kingdom_id,\n                            taxon_kingdom!inner (\n                                id,\n                                name\n                            )\n                        ").order("id");e&&(n=n.eq("kingdom_id",e));const{data:a,error:i}=await n;if(i)return void console.error("Error fetching phylum data:",i);a.forEach((e=>T(e))),B(),z()}():"variety"===c?await async function(){const e=d.value;let n=t.from("taxon_variety").select("\n                            id,\n                            name,\n                            species_id,\n                            info,\n                            taxon_species!inner (\n                                id,\n                                name,\n                                genus_id,\n                                taxon_genus!inner (\n                                    id,\n                                    name,\n                                    taxon_family!inner (\n                                        id,\n                                        name,\n                                        taxon_order!inner (\n                                            id,\n                                            name,\n                                            taxon_class!inner (\n                                                id,\n                                                name,\n                                                taxon_phylum!inner (\n                                                    id,\n                                                    name,\n                                                    kingdom_id\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        ").order("id");e&&(n=n.eq("taxon_species.taxon_genus.taxon_family.taxon_order.taxon_class.taxon_phylum.kingdom_id",e));const{data:a,error:i}=await n;if(i)return void console.error("Error fetching variety data:",i);a.forEach((e=>U(e))),B(),z()}():"park_locations"===c&&await async function(){const{data:e,error:a}=await t.from("park_locations").select("\n                                id,\n                                name,\n                                info,\n                                tags,\n                                location::geometry,\n                                images,\n                                image_info,\n                                is_accessible,\n                                category_id,\n                                location_categories!inner (\n                                    id,\n                                    name,\n                                    info,\n                                    colour\n                                )\n                            ").order("id");if(a)return void console.error("Error fetching park locations data:",a);console.log("Fetched location data:",e);e.map((e=>{const n=e.location?parseFloat(e.location.coordinates[1]):0,t=e.location?parseFloat(e.location.coordinates[0]):0;return{...e,latitude:n,longitude:t,tags:e.tags?e.tags.join(", "):""}})).forEach((e=>function(e){const t=document.createElement("div");t.className="card";const a="/storage/v1/object/public/images/";let i="";if(e.images){const t=JSON.parse(e.images),o=JSON.parse(e.image_info||"[]");for(;o.length<t.length;)o.push("");i=t.map(((t,i)=>`\n                                    <div class="thumbnail-container" data-url="${t}">\n                                        <img src="${`${n}${a}park_locations/${e.id}/thumb_${t}`}" class="thumbnail" alt="location image">\n                                        <textarea class="input-field image-description" placeholder="Enter description">${o[i]||""}</textarea>\n                                        <button class="remove-button" data-url="${t}">X</button>\n                                    </div>\n                                `)).join("")}t.innerHTML=`\n                            <p><strong class="work-sans">Location #</strong></p> <div id="locationIdField">${e.id}</div>\n                            <p><strong class="work-sans">Name:</strong></p> <div><input type="text" id="locationName" class="input-field max-width work-sans" value="${e.name}" /></div>\n                            <p><strong class="work-sans">Category:</strong></p> <div class="menu-button-container">${M(e.category_id,b)}</div>\n                            <p><strong class="work-sans">Location:</strong></p> <div class="menu-button-container"><input type="text" id="locationField" class="input-field max-width work-sans" value="${e.latitude}, ${e.longitude}"/><button class="add-button" id="show-location-button"><span class="material-symbols-outlined">pin_drop</span></button></div>\n                            <p><strong class="work-sans">Description:</strong></p> <div><textarea class="input-field" style="height: 120px;">${e.info}</textarea></div>\n                            <p><strong class="work-sans">Tags:</strong></p><div><textarea id="tagsField" class="input-field" style="height: 60px;">${e.tags}</textarea></div> \n                            <p><strong class="work-sans">Upload Images:</strong></p> <div><input type="file" id="imageUpload" class="input-field max-width work-sans" multiple /></div>\n                            <div><strong class="work-sans">Current Images:</strong></div>\n                            <div id="sortable-images-${e.id}" class="image-thumbnails">${i}</div>\n                            <div class="switch-row">\n                                <div><strong class="work-sans">Access:</strong> ${F(e.is_accessible)}</div>\n                            </div>\n                            <div class="action-buttons">\n                                <button class="update-button" data-id="${e.id}" data-type="park_locations">Update</button>\n                            </div>\n                            <div class="uploading-message" style="display:none;"><span class="uploading-indicator"></span> Uploading...</div>\n                            <div class="feedback-message">Update successful!</div>\n                        `,r.appendChild(t),new Sortable(document.getElementById(`sortable-images-${e.id}`),{animation:150,onEnd:async function(n){const t=Array.from(n.to.children).map((e=>e.getAttribute("data-url"))),a=Array.from(n.to.children).map((e=>e.querySelector(".image-description").value));await I("park_locations",e.id,t,a)}}),$(t),k(t),D(t,"park_locations",e.id)}(e))),B(),z()}(),w.observe(r,{childList:!0})}async function q(){if("species"===c){const{data:e,error:n}=await t.from("taxon_species").select("id").order("id",{ascending:!1}).limit(1),a=e&&e.length>0?e[0].id+1:1,{error:i}=await t.from("taxon_species").insert([{id:a}]);if(i)return void console.error("Error inserting new species row:",i);N({id:a,genus_id:0,name:"",common_name:"",native_range:"",info:""})}else if("specimen"===c){const{data:e,error:n}=await t.from("botanical_specimen").select("id").order("id",{ascending:!1}).limit(1),a=e&&e.length>0?e[0].id+1:1,{error:i}=await t.from("botanical_specimen").insert([{id:a}]);if(i)return void console.error("Error inserting new specimen row:",i);A({id:a,latitude:0,longitude:0,info:"",species_id:0})}else if("park_locations"===c){const{data:e,error:n}=await t.from("park_locations").select("id").order("id",{ascending:!1}).limit(1),a=e&&e.length>0?e[0].id+1:1,{error:i}=await t.from("park_locations").insert([{id:a}]);if(i)return void console.error("Error inserting new location row:",i);A({id:a,latitude:0,longitude:0,info:"",species_id:0})}else if("variety"===c){const{data:e,error:n}=await t.from("taxon_variety").select("id").order("id",{ascending:!1}).limit(1),a=e&&e.length>0?e[0].id+1:1,{error:i}=await t.from("taxon_variety").insert([{id:a}]);if(i)return void console.error("Error inserting new variety row:",i);U({id:a,name:"",info:"",species_id:0})}else if("genus"===c){const{data:e,error:n}=await t.from("taxon_genus").select("id").order("id",{ascending:!1}).limit(1),a=e&&e.length>0?e[0].id+1:1,{error:i}=await t.from("taxon_genus").insert([{id:a}]);if(i)return void console.error("Error inserting new genus row:",i);C({id:a,name:"",info:"",family_id:0})}else if("family"===c){const{data:e,error:n}=await t.from("taxon_family").select("id").order("id",{ascending:!1}).limit(1),a=e&&e.length>0?e[0].id+1:1,{error:i}=await t.from("taxon_family").insert([{id:a}]);if(i)return void console.error("Error inserting new family row:",i);O({id:a,name:"",info:"",order_id:0})}else if("order"===c){const{data:e,error:n}=await t.from("taxon_order").select("id").order("id",{ascending:!1}).limit(1),a=e&&e.length>0?e[0].id+1:1,{error:i}=await t.from("taxon_order").insert([{id:a}]);if(i)return void console.error("Error inserting new order row:",i);L({id:a,name:"",info:"",class_id:0})}else if("class"===c){const{data:e,error:n}=await t.from("taxon_class").select("id").order("id",{ascending:!1}).limit(1),a=e&&e.length>0?e[0].id+1:1,{error:i}=await t.from("taxon_class").insert([{id:a}]);if(i)return void console.error("Error inserting new class row:",i);J({id:a,name:"",info:"",phylum_id:0})}else if("phylum"===c){const{data:e,error:n}=await t.from("taxon_phylum").select("id").order("id",{ascending:!1}).limit(1),a=e&&e.length>0?e[0].id+1:1,{error:i}=await t.from("taxon_phylum").insert([{id:a}]);if(i)return void console.error("Error inserting new phylum row:",i);T({id:a,name:"",info:"",kingdom_id:0})}z()}async function I(e,n,a,i){const{data:o,error:r}=await t.from(e).update({images:JSON.stringify(a),image_info:JSON.stringify(i)}).eq("id",n);r?console.error("Error updating image order:",r):console.log("Image order updated successfully:",o)}function N(e){const n=document.createElement("div");n.className="card",n.innerHTML=`\n                            <p><strong>Species #</strong></p> <div>${e.id}</div>\n                            <p><strong>Genus:</strong></p> <div class="menu-button-container">${M(e.genus_id,m,"italic")}<button class="add-button"><span class="material-symbols-outlined" id="add-genus-button">add</span></button></div>\n                            <p><strong>Species:</strong></p> <div><input type="text" class="input-field max-width work-sans italic" value="${e.name}" /></div>\n                            <p><strong>Common Name:</strong></p> <div><textarea class="input-field work-sans"  ">${e.common_name}</textarea></div>\n                            <p><strong>Native Range:</strong></p> <div><textarea class="input-field" style="height: 60px;">${e.native_range}</textarea></div>\n                            <p><strong>Description:</strong></p> <div><textarea class="input-field" style="height: 120px;">${e.info}</textarea></div>\n\n                            <div class="action-buttons">\n                                <button class="update-button" data-id="${e.id}" data-type="species">Update</button>\n                            </div>\n                            <div class="feedback-message">Update successful!</div>\n                        `,r.appendChild(n),k(n)}function A(e){const t=document.createElement("div");t.className="card";let a="",i=[],o=[];if(e.images){for(i=JSON.parse(e.images),o=JSON.parse(e.image_info||"[]");o.length<i.length;)o.push("");a=i.map(((t,a)=>`\n                                    <div class="thumbnail-container" data-url="${t}">\n                                        <img src="${`${n}/storage/v1/object/public/images/botanical_specimen/${e.id}/thumb_${t}`}" class="thumbnail" alt="specimen image">\n                                        <textarea class="input-field image-description" placeholder="Enter description">${o[a]||""}</textarea>\n                                        <button class="remove-button" data-url="${t}">X</button>\n                                    </div>\n                                `)).join("")}t.innerHTML=`\n                            <p><strong class="work-sans">Specimen #</p> <div id="specimenIdField">${e.id}</div></strong>\n                            <p><strong>Species:</strong></p> <div class="menu-button-container" id="speciesIdMenu">${M(e.species_id,p,"italic",'id="#speciesIdMenu"')}<button class="add-button"><span class="material-symbols-outlined" id="add-species-button">add</span></button></div>\n                            <p><strong>Variety:</strong></p> <div class="menu-button-container">${M(e.variety_id,g,"italic")}<button class="add-button"><span class="material-symbols-outlined" id="add-variety-button">add</span></button></div>\n                            <p><strong>Location:</strong></p> <div class="menu-button-container"><input type="text" id="locationField" class="input-field max-width work-sans" value="${e.latitude}, ${e.longitude}"/><button class="add-button" id="show-location-button"><span class="material-symbols-outlined">pin_drop</span></button></div>\n                            <p><strong>Description:</strong></p> <div><textarea class="input-field" id="specimenInfoField" style="height: 120px;">${e.info}</textarea></div> \n                            <p><strong>Upload Images:</strong></p> <div><input type="file" id="imageUpload" class="input-field max-width work-sans" multiple /></div>\n                            <div><strong>Current Images:</strong></div>\n                            <div id="sortable-images-${e.id}" class="image-thumbnails">${a}</div>\n                            <div class="switch-row">\n                                <div><strong>Access:</strong> ${F(e.is_accessible)}</div>\n                                <div><strong>Tree:</strong> ${F(e.is_tree)}</div>\n                                <div><strong>Notable:</strong> ${F(e.is_notable)}</div>\n                            </div>\n                            \n                            <div class="action-buttons">\n                                <button class="update-button" data-id="${e.id}" data-type="specimen">Update</button>\n                            </div>\n                            <div class="uploading-message" style="display:none;"><span class="uploading-indicator"></span> Uploading...</div>\n                            <div class="feedback-message">Update successful!</div>\n                            \n                            \x3c!-- Hidden element to store image data --\x3e\n                            <input type="hidden" class="image-data" \n                                data-image-filenames='${JSON.stringify(i)}' \n                                data-image-descriptions='${JSON.stringify(o)}' />\n                                                    `,r.appendChild(t),new Sortable(document.getElementById(`sortable-images-${e.id}`),{animation:150,onEnd:async function(n){const t=Array.from(n.to.children).map((e=>e.getAttribute("data-url"))),a=Array.from(n.to.children).map((e=>e.querySelector(".image-description").value));await I("botanical_specimen",e.id,t,a)}}),$(t),k(t),D(t,"botanical_specimen",e.id)}function U(e){const n=document.createElement("div");n.className="card",n.innerHTML=`\n                            <p><strong>Variety #</p> <div>${e.id}</div></strong>\n                            <p><strong>Species:</strong></p> <div class="menu-button-container">${M(e.species_id,p,"italic")}<button class="add-button"><span class="material-symbols-outlined" id="add-species-button">add</span></button></div>\n                            <p><strong>Variety:</strong></p> <div><input type="text" class="input-field max-width work-sans italic" value="${e.name}" /></div>\n                            \n                            <p><strong>Description:</strong></p> <div><textarea class="input-field" style="height: 120px;">${e.info}</textarea></div>\n                            \n                            <div class="action-buttons">\n                                <button class="update-button" data-id="${e.id}" data-type="variety">Update</button>\n                            </div>\n                            <div class="feedback-message">Update successful!</div>\n                        `,r.appendChild(n),k(n)}function C(e){const n=document.createElement("div");n.className="card",n.innerHTML=`\n                            <p><strong>Genus #</p> <div>${e.id}</div></strong>\n                            <p><strong>Family:</strong></p> <div class="menu-button-container">${M(e.family_id,f,"italic")}<button class="add-button"><span class="material-symbols-outlined" id="add-family-button">add</span></button></div>\n                            <p><strong>Genus:</strong></p> <div><input type="text" class="input-field max-width work-sans italic" value="${e.name}" /></div>\n                            \n                            <p><strong>Description:</strong></p> <div><textarea class="input-field" style="height: 120px;">${e.info}</textarea></div>\n                            \n                            <div class="action-buttons">\n                                <button class="update-button" data-id="${e.id}" data-type="genus">Update</button>\n                            </div>\n                            <div class="feedback-message">Update successful!</div>\n                        `,r.appendChild(n),k(n)}function O(e){const n=document.createElement("div");n.className="card",n.innerHTML=`\n                            <p><strong>Family #</p> <div>${e.id}</div></strong>\n                            <p><strong>Order:</strong></p> <div class="menu-button-container">${M(e.order_id,y,"italic")}<button class="add-button"><span class="material-symbols-outlined" id="add-order-button">add</span></button></div>\n                            <p><strong>Family:</strong></p> <div><input type="text" class="input-field max-width work-sans italic" value="${e.name}" /></div>\n                            \n                            <p><strong>Description:</strong></p> <div><textarea class="input-field" style="height: 120px;">${e.info}</textarea></div>\n                            \n                            <div class="action-buttons">\n                                <button class="update-button" data-id="${e.id}" data-type="family">Update</button>\n                            </div>\n                            <div class="feedback-message">Update successful!</div>\n                        `,r.appendChild(n),k(n)}function L(e){const n=document.createElement("div");n.className="card",n.innerHTML=`\n                            <p><strong>Order #</p> <div>${e.id}</div></strong>\n                            <p><strong>Class:</strong></p> <div class="menu-button-container">${M(e.class_id,v,"italic")}<button class="add-button"><span class="material-symbols-outlined" id="add-class-button">add</span></button></div>\n                            <p><strong>Order:</strong></p> <div><input type="text" class="input-field max-width work-sans italic" value="${e.name}" /></div>\n                            \n                            <p><strong>Description:</strong></p> <div><textarea class="input-field" style="height: 120px;">${e.info}</textarea></div>\n                            \n                            <div class="action-buttons">\n                                <button class="update-button" data-id="${e.id}" data-type="order">Update</button>\n                            </div>\n                            <div class="feedback-message">Update successful!</div>\n                        `,r.appendChild(n),k(n)}function J(e){const n=document.createElement("div");n.className="card",n.innerHTML=`\n                            <p><strong>Class #</p> <div>${e.id}</div></strong>\n                            <p><strong>Phylum:</strong></p> <div class="menu-button-container">${M(e.phylum_id,h,"italic")}<button class="add-button"><span class="material-symbols-outlined" id="add-phylum-button">add</span></button></div>\n                            <p><strong>Class:</strong></p> <div><input type="text" class="input-field max-width work-sans italic" value="${e.name}" /></div>\n                            \n                            <p><strong>Description:</strong></p> <div><textarea class="input-field" style="height: 120px;">${e.info}</textarea></div>\n                            \n                            <div class="action-buttons">\n                                <button class="update-button" data-id="${e.id}" data-type="class">Update</button>\n                            </div>\n                            <div class="feedback-message">Update successful!</div>\n                        `,r.appendChild(n),k(n)}function T(e){const n=document.createElement("div");n.className="card",n.innerHTML=`\n                            <p><strong>Phylum #</p> <div>${e.id}</div></strong>\n                            <p><strong>Kingdom:</strong></p> <div class="menu-button-container">${M(e.kingdom_id,j(u),"italic")}<button class="add-button"><span class="material-symbols-outlined" id="add-kingdom-button">add</span></button></div>\n                            <p><strong>Phylum:</strong></p> <div><input type="text" class="input-field max-width work-sans italic" value="${e.name}" /></div>\n                            \n                            <p><strong>Description:</strong></p> <div><textarea class="input-field" style="height: 120px;">${e.info}</textarea></div>\n                            <div class="feedback-message">Update successful!</div>\n                            <div class="action-buttons">\n                                <button class="update-button" data-id="${e.id}" data-type="phylum">Update</button>\n                            </div>\n                            <div class="feedback-message">Update successful!</div>\n                        `,r.appendChild(n),k(n)}function M(e,n,t,a){t||(t="");let i=Object.entries(n);i.sort(((e,n)=>e[1].localeCompare(n[1])));let o=`<select class="max-width work-sans ${t}">`;o+='<option value=""></option>';for(const[n,r]of i){o+=`<option value="${n}" ${n===(e||"").toString()?"selected":""} class="work-sans ${t}" ${a}>${r}</option>`}return o+="</select>",o}function F(e){return`\n                            <label class="toggle-switch">\n                                <input type="checkbox" ${e?"checked":""}>\n                                <span class="slider"></span>\n                            </label>\n                        `}function j(e){const n={};return e.forEach((e=>{e&&e.id&&e.name&&(n[e.id]=e.name||"")})),n}function B(){const e=document.getElementById("search");e.addEventListener("input",(function(){const n=e.value.toLowerCase();document.querySelectorAll("#card-container .card").forEach((e=>{const t=function(e){let n="";const t=e.querySelectorAll("p, input, textarea, select");return t.forEach((e=>{"SELECT"===e.tagName?n+=e.options[e.selectedIndex].text+" ":"INPUT"===e.tagName||"TEXTAREA"===e.tagName?n+=e.value+" ":n+=e.textContent+" "})),n.trim()}(e).toLowerCase();t.includes(n)?e.style.display="grid":e.style.display="none"}))}))}async function H(e,a,i){const o=pica(),r=`${e.name.split(".")[0]}.${e.name.split(".").pop()}`,s=`${i}/${a}/${r}`;return new Promise(((d,l)=>{const c=new Image;c.onload=async()=>{const u=document.createElement("canvas");u.width=c.width,u.height=c.height;u.getContext("2d").drawImage(c,0,0,c.width,c.height);const m=document.createElement("canvas"),p=1200,g=1200;let f=c.width,y=c.height;f>y?f>p&&(y=Math.round(p/f*y),f=p):y>g&&(f=Math.round(g/y*f),y=g),m.width=f,m.height=y;try{await o.resize(u,m);const p=await o.toBlob(m,"image/jpeg",.9),g=new File([p],r,{type:e.type}),{data:v,error:h}=await t.storage.from("images").upload(s,g);if(h)return console.error("Error uploading original image:",h.message),void l(h.message);const b=document.createElement("canvas"),_=300,x=300;f=c.width,y=c.height,f>y?f>_&&(y=Math.round(_/f*y),f=_):y>x&&(f=Math.round(x/y*f),y=x),b.width=f,b.height=y,await o.resize(u,b);const w=await o.toBlob(b,"image/jpeg",.9),$=`thumb_${r}`,k=new File([w],$,{type:e.type}),E=`${i}/${a}/${k.name}`,{data:S,error:q}=await t.storage.from("images").upload(E,k);if(q)return console.error("Error uploading thumbnail:",q.message),void l(q.message);const I=`\n                                        <div class="thumbnail-container" data-url="${r}">\n                                            <img src="${`${n}/storage/v1/object/public/images/${E}`}" class="thumbnail" alt="location image">\n                                            <button class="remove-button" data-url="${r}">X</button>\n                                        </div>\n                                    `,N=document.getElementById(`sortable-images-${a}`);N.insertAdjacentHTML("beforeend",I),D(N.closest(".card"),i,a),d({imageUrl:r,thumbnailUrl:k.name})}catch(e){l(`Error processing image: ${e.message}`)}},c.onerror=e=>l(`Error loading image: ${e.message}`),c.src=URL.createObjectURL(e)}))}function D(e,n,a){e.querySelectorAll(".remove-button").forEach((e=>{e.addEventListener("click",(async()=>{const i=e.getAttribute("data-url"),o=`${n}/${a}/${i}`,r=`${n}/${a}/${`thumb_${i}`}`;try{const{data:s,error:d}=await t.storage.from("images").remove([o,r]);if(d)return void console.error("Error deleting images from storage:",d);const{data:l,error:c}=await t.from(n).select("images, image_info").eq("id",a).single();if(c||!l.images)return void console.error("Error fetching images or image_info:",c);let u=JSON.parse(l.images),m=JSON.parse(l.image_info||"[]");const p=u.indexOf(i);-1!==p&&(u.splice(p,1),m.splice(p,1));const{data:g,error:f}=await t.from(n).update({images:u.length?JSON.stringify(u):null,image_info:m.length?JSON.stringify(m):null}).eq("id",a);if(f)return void console.error("Error updating images and image_info:",f);e.closest(".thumbnail-container").remove(),console.log("Image and image_info removed successfully:",g)}catch(e){console.error("Unexpected error during image removal:",e)}}))}))}function z(){document.querySelectorAll(".update-button").forEach((e=>{e.addEventListener("click",(async()=>{const n=e.closest(".card"),a=e.getAttribute("data-id"),i=e.getAttribute("data-type");let o=!1;if("species"===i){const e=n.querySelector(".menu-button-container select").value,i=n.querySelector(".input-field.italic").value,r=n.querySelector("textarea.work-sans").value,s=n.querySelectorAll("textarea")[1].value,d=n.querySelectorAll("textarea")[2].value,{data:l,error:c}=await t.from("taxon_species").update({genus_id:e,name:i,common_name:r,native_range:s,info:d}).eq("id",a);c?console.error("Error updating species data:",c):(console.log("Species data updated successfully:",l),o=!0)}else if("specimen"===i){const e=n.querySelector("#specimenIdField").textContent,a=parseInt(n.querySelectorAll(".menu-button-container select")[0].value),i=parseInt(n.querySelectorAll(".menu-button-container select")[1].value),r=n.querySelectorAll(".input-field")[0].value.split(", "),s=n.querySelectorAll("textarea")[0].value,d=n.querySelectorAll(".toggle-switch input")[0].checked,l=n.querySelectorAll(".toggle-switch input")[1].checked,c=n.querySelectorAll(".toggle-switch input")[2].checked,u=n.querySelector("#imageUpload"),m=n.querySelector(".uploading-message");m.style.display="flex";const{data:p,error:g}=await t.from("botanical_specimen").select("images, image_info").eq("id",e).single();if(g)return void console.error("Error fetching specimen images:",g);let f=p.images?JSON.parse(p.images):[],y=p.image_info?JSON.parse(p.image_info):[];if(u.files.length>0){for(const n of u.files)try{const{imageUrl:t}=await H(n,e,"botanical_specimen");f.push(t),y.push("")}catch(e){console.error("Error uploading image:",e)}u.value=""}const v=Array.from(n.querySelectorAll(".image-description")).map((e=>e.value||""));if(v.length<f.length)for(let e=v.length;e<f.length;e++)v.push("");m.style.display="none";const{data:h,error:b}=await t.from("botanical_specimen").update({species_id:a,variety_id:i,location:`POINT(${r[1]} ${r[0]})`,info:s,is_accessible:d,is_notable:c,is_tree:l,images:f.length?JSON.stringify(f):null,image_info:JSON.stringify(v)}).eq("id",e);b?console.error("Error updating specimen data:",b):(console.log("Specimen data updated successfully:",h),o=!0)}if(o){const e=n.querySelector(".feedback-message");e.style.display="block",setTimeout((()=>{e.style.display="none"}),6e3)}else if("park_locations"===i){const e=n.querySelector("#locationIdField").textContent,a=n.querySelector("#locationName").value,i=n.querySelector("#locationField").value.split(", "),r=parseInt(n.querySelectorAll(".menu-button-container select")[0].value),s=n.querySelectorAll("textarea")[0].value,d=n.querySelector("#tagsField").value.split(",").map((e=>e.trim())),l=n.querySelectorAll(".toggle-switch input")[0].checked,c=n.querySelector("#imageUpload"),u=n.querySelector(".uploading-message");u.style.display="flex";const{data:m,error:p}=await t.from("park_locations").select("images, image_info").eq("id",e).single();if(p)return void console.error("Error fetching location images:",p);let g=m.images?JSON.parse(m.images):[],f=m.image_info?JSON.parse(m.image_info):[];if(c.files.length>0){for(const n of c.files)try{const{imageUrl:t}=await H(n,e,"park_locations");g.push(t),f.push("")}catch(e){console.error("Error uploading image:",e)}c.value=""}const y=Array.from(n.querySelectorAll(".image-description")).map((e=>e.value||""));if(y.length<g.length)for(let e=y.length;e<g.length;e++)y.push("");u.style.display="none";const{data:v,error:h}=await t.from("park_locations").update({name:a,location:`POINT(${i[1]} ${i[0]})`,info:s,tags:d,is_accessible:l,category_id:r,images:g.length?JSON.stringify(g):null,image_info:JSON.stringify(y)}).eq("id",e);h?console.error("Error updating location data:",h):(console.log("Location data updated successfully:",v),o=!0)}if(o){const e=n.querySelector(".feedback-message");e.style.display="block",setTimeout((()=>{e.style.display="none"}),6e3)}else if("genus"===i){const e=n.querySelector(".menu-button-container select").value,i=n.querySelector(".input-field.italic").value,r=n.querySelector("textarea").value,{data:s,error:d}=await t.from("taxon_genus").update({family_id:e,name:i,info:r}).eq("id",a);d?console.error("Error updating genus data:",d):(console.log("Genus data updated successfully:",s),o=!0)}else if("variety"===i){const e=n.querySelector(".menu-button-container select").value,i=n.querySelector(".input-field.italic").value,r=n.querySelector("textarea").value,{data:s,error:d}=await t.from("taxon_variety").update({species_id:e,name:i,info:r}).eq("id",a);d?console.error("Error updating variety data:",d):(console.log("Variety data updated successfully:",s),o=!0)}else if("family"===i){const e=n.querySelector(".menu-button-container select").value,i=n.querySelector(".input-field.italic").value,r=n.querySelector("textarea").value,{data:s,error:d}=await t.from("taxon_family").update({order_id:e,name:i,info:r}).eq("id",a);d?console.error("Error updating family data:",d):(console.log("Family data updated successfully:",s),o=!0)}else if("order"===i){const e=n.querySelector(".menu-button-container select").value,i=n.querySelector(".input-field.italic").value,r=n.querySelector("textarea").value,{data:s,error:d}=await t.from("taxon_order").update({class_id:e,name:i,info:r}).eq("id",a);d?console.error("Error updating order data:",d):(console.log("Order data updated successfully:",s),o=!0)}else if("class"===i){const e=n.querySelector(".menu-button-container select").value,i=n.querySelector(".input-field.italic").value,r=n.querySelector("textarea").value,{data:s,error:d}=await t.from("taxon_class").update({phylum_id:e,name:i,info:r}).eq("id",a);d?console.error("Error updating class data:",d):(console.log("Class data updated successfully:",s),o=!0)}else if("phylum"===i){const e=n.querySelector(".menu-button-container select").value,i=n.querySelector(".input-field.italic").value,r=n.querySelector("textarea").value,{data:s,error:d}=await t.from("taxon_phylum").update({kingdom_id:e,name:i,info:r}).eq("id",a);d?console.error("Error updating phylum data:",d):(console.log("Phylum data updated successfully:",s),o=!0)}if(o){const e=n.querySelector(".feedback-message");e.style.display="block",setTimeout((()=>{e.style.display="none"}),6e3)}}))}))}w.observe(r,{childList:!0,subtree:!0}),async function(){const{data:e,error:n}=await t.from("taxon_kingdom").select("id, name, common_name");n?console.error("Error fetching kingdom data:",n):(u=e,u.forEach((e=>{const n=document.createElement("option");n.value=e.id,n.textContent=e.common_name,d.appendChild(n)})))}(),S()}));